#include "mbed.h"
#include "C12832.h"
#include "QEI.h"

class Encoder {
private:
    QEI encoder;
    Timer t;
public:
    Encoder(PinName pin1, PinName pin2, int pulses) : encoder(pin1, pin2, NC, pulses), t() {
        t.start();
    }
    
    float calculate_velocity() {
        int pulse_number = encoder.getPulses();
        float velocity = (2 * 3.14159265 * 0.04 * pulse_number) / (512*t.read());
        t.reset();
        encoder.reset();
        return velocity;
    }
};

Timer t2;

const float KP = 1.3;
const float KI = 0.0;
const float KD = 0.0;


class PIDControl {
private:
    float kp_;
    float ki_;
    float kd_;
    float prev_error;
    float integral;

public:
    PIDControl(float kp, float ki, float kd) : kp_(kp), ki_(ki), kd_(kd) {
        prev_error = 0;
        integral = 0;
    }

    float compute(float setpoint, float velocity) {
        float error = setpoint - velocity;
        float derivative = error - prev_error;
        prev_error = error;
        float output = kp_ * error ;
        if (output > 1.0) {output = 1.0;}
        if (output < 0.0) {output = 0.0;}
        return output;
    }
};

PIDControl pid_left(KP, KI, KD);
PIDControl pid_right(KP, KI, KD);

//define the sensor
DigitalIn s1(PB_4, PullUp);
DigitalIn s2(PB_2, PullUp);
DigitalIn s3(PB_8, PullUp);
DigitalIn s4(PA_9, PullUp);
DigitalIn s5(PC_7, PullUp);

//define motor2
PwmOut motor2(PA_15);
DigitalOut mode_motor2(PA_13);
DigitalOut direction_motor2(PA_14);
Encoder encoder1(PB_3, PA_10, 512);
float frequency2 = 2000.0;


//define motor1
PwmOut motor1(PB_7);
DigitalOut mode_motor1(PB_12);
DigitalOut direction_motor1(PC_13);
Encoder encoder2(PC_8, PC_6, 512);
float frequency1 = 2000.0;
DigitalOut enable(PC_5);
InterruptIn centre (D4);
InterruptIn down (A3);

volatile float left_duty_cycle;
volatile float right_duty_cycle;

RawSerial hm10(PA_11, PA_12);
char s;

void initialize(){
    direction_motor1 = 1;
    direction_motor2 = 1;
    motor1.period(1/frequency1);
    motor1.write(1.0);
    motor2.period(1/frequency2);
    motor2.write(1.0);
}

void forward(){
    direction_motor1 = 1;
    direction_motor2 = 1;

    float target_velocity = 0.6;

    float left_output, right_output;
    float left_velocity = encoder1.calculate_velocity();
    float right_velocity = encoder2.calculate_velocity();

    left_output = pid_left.compute(target_velocity, left_velocity) ;
    right_output = pid_right.compute(target_velocity, right_velocity);

    left_duty_cycle = 1-left_output;
    right_duty_cycle = 1-right_output;
    motor1.write(left_duty_cycle);
    motor2.write(right_duty_cycle);
}


void stop(){
    motor1.write(1.0);
    motor2.write(1.0);
    wait(100);
}

void turn_around(){
    motor1.write(1.0);
    motor2.write(1.0);
    wait(0.1);
    direction_motor1 = 1;
    direction_motor2 = 0;
    motor1.write(0.6);
    motor2.write(0.6);
    wait(0.60);
}

const float KP_line = 0.275;
const float KI_line = 0.00005;
const float KD_line = 0.0;

void follow_line(){
    direction_motor1 = 1;
    direction_motor2 = 1;
    int set_position = 0;
    float line_integral;
    float prev_line_error;
    int line_count = 0;
    bool line_state = false;

    while(1){
        int current_position = 0;
        int LS1 = s1.read();
        int LS2 = s2.read();
        int LS3 = s3.read();
        int LS4 = s4.read();
        int LS5 = s5.read();

        current_position = LS1*(-2) + LS2*(-1)+ LS3*0 + LS4*1 + LS5*2;

        float position_error = set_position - current_position;
        
        float line_output = KP_line * position_error + KI_line * position_error + KD_line * position_error;
        if (line_output > 1.0) {line_output = 1.0;}
        if (line_output < -1.0) {line_output = -1.0;}

        prev_line_error = position_error;

        float left_target_velocity = 0.38 + line_output;
        float right_target_velocity = 0.4 - line_output;

        float left_output, right_output;
        float left_velocity = encoder1.calculate_velocity();
        float right_velocity = encoder2.calculate_velocity();

        left_output = pid_left.compute(left_target_velocity, left_velocity) ;
        right_output = pid_right.compute(right_target_velocity, right_velocity);

        left_duty_cycle = 1-left_output;
        right_duty_cycle = 1-right_output;
        motor2.write(left_duty_cycle);
        motor1.write(right_duty_cycle);

        if (LS1 == 0 || LS2 == 0 || LS3 == 0 || LS4 == 0 || LS5 == 0) {
            line_count = 0;
            line_state = true;
        } else {
            line_count++;
            line_state = false;
        }

        if (line_count > 5000 && line_state == false) {
            stop();
        }

        if (hm10.readable()) {
        s = hm10.getc();
        if(s == 'B'){
        turn_around();
        }
        if(s == 'C'){
        stop();
        }}                                                                   
    }  
}


int main(){
    mode_motor1 = 0;
    mode_motor2 = 0;
    enable = 1;
    initialize();
    while(1){
    if (hm10.readable()) {
            s = hm10.getc();
        if(s == 'A'){
            follow_line();}
        if (s=='B'){
            turn_around();}
        if(s == 'C'){
            stop();}  
        }
}}
